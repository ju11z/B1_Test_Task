<Window x:Class="B1_Test_Task.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:B1_Test_Task"
        xmlns:vm="clr-namespace:B1_Test_Task.ViewModels"
        mc:Ignorable="d"
        WindowState="Maximized"
        Title="B1 test task" >
    <Window.DataContext>
        <vm:MainWindowViewModel></vm:MainWindowViewModel>
    </Window.DataContext>
    <Grid>
        <TabControl>
            <TabItem>
                <TabItem.Header>
                    <TextBlock Text="Task 1"></TextBlock>
                </TabItem.Header>
                <DockPanel>
                    <Grid DockPanel.Dock="Bottom" Height="120" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*"></ColumnDefinition>
                            <ColumnDefinition Width="3*"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{Binding Task1ViewModel.Task1Status, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" Margin="30" HorizontalAlignment="Right" FontSize="24" Grid.Column="1"></TextBlock>
                        <ProgressBar HorizontalAlignment="Left" Width="200" Height="20" Margin="30" VerticalAlignment="Top" Grid.Column="0" Minimum="{Binding Task1ViewModel.ProgressBarMin, UpdateSourceTrigger=PropertyChanged}" Maximum="{Binding Task1ViewModel.ProgressBarMax, UpdateSourceTrigger=PropertyChanged}" Value="{Binding Task1ViewModel.ProgressBarValue, UpdateSourceTrigger=PropertyChanged}"/>

                    </Grid>
                    <Grid>

                        <ListView>
                            <ListViewItem Padding="50">
                                <Grid>
                                    <Button Content="Generate files" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top"  Command="{Binding Task1ViewModel.GenerateFilesCommand}" Grid.ColumnSpan="2"/>
                                    <Button Content="Choose files folder" HorizontalAlignment="Left" Margin="200,0,0,0" VerticalAlignment="Top"  Command="{Binding Task1ViewModel.SetFilesFolderCommand}" Grid.ColumnSpan="2"/>
                                    <Slider Margin="587,32,-587,-32" Minimum="{Binding Task1ViewModel.FilesAmountMin, UpdateSourceTrigger=PropertyChanged}" Maximum="{Binding Task1ViewModel.FilesAmountMax, UpdateSourceTrigger=PropertyChanged}" Value="{Binding Task1ViewModel.FilesAmountCurrent, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding Task1ViewModel.CanChangeFilesAmount, UpdateSourceTrigger=PropertyChanged}"></Slider>
                                    <TextBlock Text="{Binding Task1ViewModel.FilesAmountCurrent, UpdateSourceTrigger=PropertyChanged}" Margin="770,15,-420,-15" HorizontalAlignment="Center"></TextBlock>
                                    <TextBlock Text="amount of files" Margin="612,0,-612,0"></TextBlock>
                                    <TextBlock Text="output path" Margin="415,1,-179,-1"/>
                                    <TextBlock Text="{Binding Task1ViewModel.FilesOutputFolder,UpdateSourceTrigger=PropertyChanged}" Margin="415,18,-179,-18"/>
                                </Grid>
                            </ListViewItem>
                            <ListViewItem Padding="50">
                                <Grid>
                                    <Button Content="Concatenate files" HorizontalAlignment="Left"  VerticalAlignment="Top"  Command="{Binding Task1ViewModel.ConcatenateFilesCommand}" Grid.ColumnSpan="2"/>
                                    <TextBlock HorizontalAlignment="Left" Margin="158,2,-9,0" TextWrapping="Wrap" Text="delete rows with substring" VerticalAlignment="Top"/>
                                    <TextBox HorizontalAlignment="Left" Margin="158,22,0,0" Text="{Binding Task1ViewModel.DeleteSubstring, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap" VerticalAlignment="Top" Width="120"  RenderTransformOrigin="-0.747,1.028"/>
                                    <TextBlock HorizontalAlignment="Left" Margin="158,2,-9,0" TextWrapping="Wrap" Text="delete rows with substring" VerticalAlignment="Top"/>
                                </Grid>



                            </ListViewItem>
                            <ListViewItem Padding="50">
                                <Button Content="Upload to DB" HorizontalAlignment="Left"  VerticalAlignment="Top"  Command="{Binding Task1ViewModel.ImportDataToDBCommand}" Grid.ColumnSpan="2"/>
                            </ListViewItem>
                            <ListViewItem Padding="50">
                                <Button Content="Calculate summ and median" HorizontalAlignment="Left"  VerticalAlignment="Top" Command="{Binding Task1ViewModel.CalculateSummAndMedianCommand}" Grid.ColumnSpan="2"/>
                            </ListViewItem>
                        </ListView>




                    </Grid>

                </DockPanel>

            </TabItem>
            <TabItem>
                <TabItem.Header>
                    <TextBlock Text="Task 2"></TextBlock>
                </TabItem.Header>
                <Grid>
                    <TabControl>
                        <TabItem>
                            <TabItem.Header>
                                <TextBlock Text="Upload file"></TextBlock>
                            </TabItem.Header>
                            <DockPanel>
                                <Grid DockPanel.Dock="Bottom" Height="200" >
                                    <TextBlock Margin="50" FontSize="20" Text="{Binding Task2ViewModel.Task2Status, UpdateSourceTrigger=PropertyChanged}"/>
                                </Grid>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition></RowDefinition>
                                        <RowDefinition Height="3*"></RowDefinition>
                                        <RowDefinition></RowDefinition>
                                    </Grid.RowDefinitions>
                                    <Button Content="Upload file" Grid.Row="0" Command="{Binding Task2ViewModel.UploadExcelFileCommand}" HorizontalAlignment="Left" Margin="30" VerticalAlignment="Top" />
                                    <ListBox Grid.Row="1" ItemsSource="{Binding Task2ViewModel.FilePaths, UpdateSourceTrigger=PropertyChanged}"  BorderThickness="2" BorderBrush="Purple" Margin="30"></ListBox>
                                    <Button Grid.Row="2" Content="Export to DB" HorizontalAlignment="Left" Margin="30" VerticalAlignment="Top" Command="{Binding Task2ViewModel.ImportFilesToDBCommand}"/>

                                </Grid>
                            </DockPanel>

                        </TabItem>
                        <TabItem>
                            <TabItem.Header>
                                <TextBlock Text="Balance sheets"></TextBlock>
                            </TabItem.Header>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*"></ColumnDefinition>
                                    <ColumnDefinition Width="3*"></ColumnDefinition>
                                </Grid.ColumnDefinitions>

                                <DataGrid  AutoGenerateColumns="False" Grid.Column="1" ItemsSource="{Binding Task2ViewModel.BalanceSheets, UpdateSourceTrigger=PropertyChanged}" Margin="20">
                                    <DataGrid.RowStyle>
                                        <Style TargetType="DataGridRow">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsCorrect}" Value="false">
                                                    <Setter Property="Background" Value="PaleVioletRed"/>
                                                    <!-- Set the background color when the condition is met -->
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </DataGrid.RowStyle>
                                    <DataGrid.Columns>
                                        <DataGridTextColumn IsReadOnly="True"  Header="Account code"  Binding="{Binding AccCode}" />
                                        <DataGridTextColumn IsReadOnly="True" Header="Incoming balance asset" Binding="{Binding IncomingBalanceAsset}" />
                                        <DataGridTextColumn IsReadOnly="True" Header="Incoming balance asset" Binding="{Binding IncomingBalanceLiability}" />
                                        <DataGridTextColumn IsReadOnly="True" Header="Turnover debet"  Binding="{Binding TurnoverDebet}" />
                                        <DataGridTextColumn IsReadOnly="True" Header="Turnover credit"  Binding="{Binding TurnoverCredit}" />
                                        <DataGridTextColumn IsReadOnly="True" Header="Outgoing balance asset" Binding="{Binding OutgoingBalanceAsset}" />
                                        <DataGridTextColumn IsReadOnly="True" Header="Outgoing balance liability" Binding="{Binding OutgoingBalanceLiability}" />
                                        <DataGridTextColumn IsReadOnly="True" Header="Suggested account type" Binding="{Binding AccountType}" />
                                    </DataGrid.Columns>

                                </DataGrid>

                                <ComboBox  Grid.Column="0"   ItemsSource="{Binding Task2ViewModel.Statements}" SelectedItem="{Binding Task2ViewModel.SelectedStatement, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" VerticalAlignment="Top" DisplayMemberPath="{Binding StatementTitle, UpdateSourceTrigger=PropertyChanged}" Margin="20" >
                                    <ComboBox.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding StatementTitle}" />
                                        </DataTemplate>
                                    </ComboBox.ItemTemplate>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding Task2ViewModel.LoadStatementsCommand}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>

                            </Grid>
                        </TabItem>
                    </TabControl>

                </Grid>
            </TabItem>



        </TabControl>
    </Grid>
</Window>
